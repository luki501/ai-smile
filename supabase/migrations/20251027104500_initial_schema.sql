-- migration: 20251027104500_initial_schema.sql
-- description: sets up the initial database schema for ai-smile.
-- tables:
--   - public.profiles
--   - public.symptoms
-- types:
--   - public.symptom_type_enum
--   - public.body_part_enum
-- functions:
--   - public.handle_new_user
-- triggers:
--   - on_auth_user_created on auth.users

--
-- section: enum types
-- description: create custom enum types for symptoms and body parts to ensure data consistency.
--

-- type: symptom_type_enum
-- purpose: defines the possible types of symptoms a user can record.
create type public.symptom_type_enum as enum (
    'tingle',
    'numbness',
    'cramps',
    'fuckedup'
);

comment on type public.symptom_type_enum is 'defines the types of symptoms a user can experience.';

-- type: body_part_enum
-- purpose: defines the body parts associated with a symptom.
create type public.body_part_enum as enum (
    'head',
    'neck',
    'back',
    'arms',
    'hands',
    'legs'
);

comment on type public.body_part_enum is 'defines the body parts where a symptom can occur.';

--
-- section: tables
-- description: create the core tables for storing user profiles and symptom data.
--

-- table: profiles
-- purpose: stores public user data, linked one-to-one with auth.users.
create table public.profiles (
    id uuid primary key references auth.users(id) on delete cascade,
    created_at timestamptz not null default now()
);

comment on table public.profiles is 'stores public profile data for users.';

-- table: symptoms
-- purpose: stores symptom entries recorded by users.
create table public.symptoms (
    id bigint primary key generated by default as identity,
    user_id uuid not null references public.profiles(id) on delete cascade,
    occurred_at timestamptz not null default now(),
    symptom_type symptom_type_enum not null,
    body_part body_part_enum not null,
    notes text,
    created_at timestamptz not null default now()
);

comment on table public.symptoms is 'stores symptom entries recorded by users.';


--
-- section: indexes
-- description: create indexes to optimize common query patterns, such as fetching and filtering symptoms.
--

-- index: symptoms_user_id_occurred_at_idx
-- purpose: speeds up chronological sorting of a user's symptoms.
create index symptoms_user_id_occurred_at_idx on public.symptoms(user_id, occurred_at desc);

-- index: symptoms_symptom_type_idx
-- purpose: speeds up filtering by symptom type.
create index symptoms_symptom_type_idx on public.symptoms(symptom_type);

-- index: symptoms_body_part_idx
-- purpose: speeds up filtering by body part.
create index symptoms_body_part_idx on public.symptoms(body_part);

--
-- section: row level security (rls)
-- description: enable rls and define policies to ensure users can only access their own data.
--

-- enable rls for profiles and symptoms tables.
alter table public.profiles enable row level security;
alter table public.symptoms enable row level security;

--
-- subsection: rls policies for profiles table
--

-- policy: profiles_anon_select
-- purpose: disallow anonymous users to view profiles.
create policy profiles_anon_select
on public.profiles for select
to anon using (false);

-- policy: profiles_anon_insert
-- purpose: disallow anonymous users to create profiles.
create policy profiles_anon_insert
on public.profiles for insert
to anon with check (false);

-- policy: profiles_anon_update
-- purpose: disallow anonymous users to update profiles.
create policy profiles_anon_update
on public.profiles for update
to anon using (false) with check (false);

-- policy: profiles_anon_delete
-- purpose: disallow anonymous users to delete profiles.
create policy profiles_anon_delete
on public.profiles for delete
to anon using (false);

-- policy: profiles_auth_select
-- purpose: allow authenticated users to view their own profile.
create policy profiles_auth_select
on public.profiles for select
to authenticated using (auth.uid() = id);

-- policy: profiles_auth_insert
-- purpose: allow authenticated users to create their own profile.
create policy profiles_auth_insert
on public.profiles for insert
to authenticated with check (auth.uid() = id);

-- policy: profiles_auth_update
-- purpose: allow authenticated users to update their own profile.
create policy profiles_auth_update
on public.profiles for update
to authenticated using (auth.uid() = id) with check (auth.uid() = id);

-- policy: profiles_auth_delete
-- purpose: allow authenticated users to delete their own profile.
create policy profiles_auth_delete
on public.profiles for delete
to authenticated using (auth.uid() = id);

--
-- subsection: rls policies for symptoms table
--

-- policy: symptoms_anon_select
-- purpose: disallow anonymous users to view symptoms.
create policy symptoms_anon_select
on public.symptoms for select
to anon using (false);

-- policy: symptoms_anon_insert
-- purpose: disallow anonymous users to create symptoms.
create policy symptoms_anon_insert
on public.symptoms for insert
to anon with check (false);

-- policy: symptoms_anon_update
-- purpose: disallow anonymous users to update symptoms.
create policy symptoms_anon_update
on public.symptoms for update
to anon using (false) with check (false);

-- policy: symptoms_anon_delete
-- purpose: disallow anonymous users to delete symptoms.
create policy symptoms_anon_delete
on public.symptoms for delete
to anon using (false);

-- policy: symptoms_auth_select
-- purpose: allow authenticated users to view their own symptoms.
create policy symptoms_auth_select
on public.symptoms for select
to authenticated using (auth.uid() = user_id);

-- policy: symptoms_auth_insert
-- purpose: allow authenticated users to create their own symptoms.
create policy symptoms_auth_insert
on public.symptoms for insert
to authenticated with check (auth.uid() = user_id);

-- policy: symptoms_auth_update
-- purpose: allow authenticated users to update their own symptoms.
create policy symptoms_auth_update
on public.symptoms for update
to authenticated using (auth.uid() = user_id) with check (auth.uid() = user_id);

-- policy: symptoms_auth_delete
-- purpose: allow authenticated users to delete their own symptoms.
create policy symptoms_auth_delete
on public.symptoms for delete
to authenticated using (auth.uid() = user_id);

--
-- section: functions
-- description: defines database functions for handling user-related actions, such as profile creation.
--

-- function: handle_new_user
-- purpose: automatically creates a new profile row when a new user signs up.
create function public.handle_new_user()
returns trigger
language plpgsql
security definer set search_path = public
as $$
begin
  insert into public.profiles (id)
  values (new.id);
  return new;
end;
$$;

-- By default, the function is owned by the user running the migration.
-- We need to change the owner to the `postgres` role, which is a superuser
-- in the Supabase local dev environment and can bypass RLS.
alter function public.handle_new_user() owner to postgres;

comment on function public.handle_new_user() is 'creates a new user profile upon registration.';

--
-- section: triggers
-- description: sets up triggers to automate database operations, like calling handle_new_user on user creation.
--

-- trigger: on_auth_user_created
-- purpose: fires after a new user is created in the auth.users table to create their profile.
create trigger on_auth_user_created
  after insert on auth.users
  for each row execute procedure public.handle_new_user();