-- migration: 20251031120000_create_reports.sql
-- description: creates the reports table for storing ai-generated symptom reports.
-- tables:
--   - public.reports
-- affected areas:
--   - adds new table with foreign key to public.profiles
--   - enables row level security with policies for authenticated users only

--
-- section: tables
-- description: create the reports table for archiving ai-generated symptom analyses.
--

-- table: reports
-- purpose: stores historical ai-generated reports for users, allowing them to review
--          past analyses of their symptoms over specific time periods.
create table public.reports (
    id bigint primary key generated by default as identity,
    user_id uuid not null references public.profiles(id) on delete cascade,
    created_at timestamptz not null default now(),
    content text not null,
    period_start timestamptz not null,
    period_end timestamptz not null,
    period_type varchar(20) not null
);

comment on table public.reports is 'stores history of ai-generated reports created by users.';
comment on column public.reports.id is 'unique identifier for each report.';
comment on column public.reports.user_id is 'reference to the user who owns this report.';
comment on column public.reports.created_at is 'timestamp when the report was generated.';
comment on column public.reports.content is 'ai-generated report content in text format.';
comment on column public.reports.period_start is 'start date/time of the analysis period.';
comment on column public.reports.period_end is 'end date/time of the analysis period.';
comment on column public.reports.period_type is 'type of analysis period: week, month, quarter.';

--
-- section: indexes
-- description: create indexes to optimize common query patterns for reports.
--

-- index: reports_user_id_created_at_idx
-- purpose: speeds up fetching a user's reports in reverse chronological order (most recent first).
create index reports_user_id_created_at_idx on public.reports(user_id, created_at desc);

-- index: reports_period_type_idx
-- purpose: speeds up filtering reports by period type (week, month, quarter).
create index reports_period_type_idx on public.reports(period_type);

-- index: reports_user_id_period_dates_idx
-- purpose: speeds up searching for reports within specific date ranges for a user.
create index reports_user_id_period_dates_idx on public.reports(user_id, period_start, period_end);

--
-- section: row level security (rls)
-- description: enable rls and define policies to ensure users can only access their own reports.
--              anonymous users have no access to reports.
--

-- enable rls for the reports table.
alter table public.reports enable row level security;

--
-- subsection: rls policies for reports table
--

-- policy: reports_anon_select
-- purpose: disallow anonymous users from viewing any reports.
--          reports contain sensitive user health data and should only be accessible
--          to authenticated users viewing their own data.
create policy reports_anon_select
on public.reports for select
to anon using (false);

-- policy: reports_anon_insert
-- purpose: disallow anonymous users from creating reports.
--          only authenticated users can generate reports for themselves.
create policy reports_anon_insert
on public.reports for insert
to anon with check (false);

-- policy: reports_anon_update
-- purpose: disallow anonymous users from updating reports.
--          reports should be immutable records of ai analyses.
create policy reports_anon_update
on public.reports for update
to anon using (false) with check (false);

-- policy: reports_anon_delete
-- purpose: disallow anonymous users from deleting reports.
--          only authenticated users can manage their own report history.
create policy reports_anon_delete
on public.reports for delete
to anon using (false);

-- policy: reports_auth_select
-- purpose: allow authenticated users to view only their own reports.
--          this ensures user privacy and data isolation.
create policy reports_auth_select
on public.reports for select
to authenticated using (auth.uid() = user_id);

-- policy: reports_auth_insert
-- purpose: allow authenticated users to create reports for themselves only.
--          prevents users from creating reports for other users.
create policy reports_auth_insert
on public.reports for insert
to authenticated with check (auth.uid() = user_id);

-- policy: reports_auth_update
-- purpose: allow authenticated users to update only their own reports.
--          note: reports are typically immutable, but this allows for corrections
--          or regeneration if needed.
create policy reports_auth_update
on public.reports for update
to authenticated using (auth.uid() = user_id) with check (auth.uid() = user_id);

-- policy: reports_auth_delete
-- purpose: allow authenticated users to delete only their own reports.
--          gives users control over their report history.
create policy reports_auth_delete
on public.reports for delete
to authenticated using (auth.uid() = user_id);

